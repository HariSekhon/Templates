#
#  Author: Hari Sekhon
#  Date: [% DATE # 2020-02-11 12:53:33 +0000 (Tue, 11 Feb 2020) %]
#
#  [% URL %]
#
#  [% LICENSE %]
#
#  [% MESSAGE %]
#
#  [% LINKEDIN %]
#

# ============================================================================ #
#                         G C P   C l o u d   B u i l d
# ============================================================================ #

# References:
#
#     https://cloud.google.com/cloud-build/docs/build-config
#
#     https://cloud.google.com/cloud-build/docs/speeding-up-builds
#
#     https://cloud.google.com/cloud-build/docs/building-leaner-containers
#
#     https://cloud.google.com/cloud-build/docs/build-debug-locally
#
#     https://cloud.google.com/cloud-build/docs/access-private-github-repos
#

# gcloud builds submit --config cloudbuild.yaml .

# cloud-build-local --config cloudbuild.yaml --dryrun=false .  # --push

# Notes:
#
# - $PROJECT_ID is auto-populated by Cloud Build
# - tars $PWD to bucket called ${PROJECT_ID}_cloudbuild
# - $PWD is unpacked to /workspace inside the docker images being run to create builds

# variables - can override these on the CLI via:
#
#   --substitutions=_IMAGE_NAME="myapp",_IMAGE_VERSION:"1.1"
#
substitutions:
  # XXX: set image and tag
  _IMAGE_NAME: myapp
  # requires string, not float
  _IMAGE_VERSION: "1.0"
  #_REGISTRY: eu.gcr.io
  _REGISTRY: gcr.io
  # XXX: if you hardcode _PROJECT to a shared project where you keep all your company images, then
  #      you'll need to switch your GCloud SDK core.project to submit to that project to get the right GCS permissions to store the image
  #
  # XXX: if debugging in a local builder $PROJECT_ID isn't set and comes out literally, breaking the build with the below error
  #      so in that case you must hardcode _PROJECT's value to get it build in local debug builder
  #
  #      invalid argument "gcr.io/$PROJECT_ID/myimage:latest" for "-t, --tag" flag: invalid reference format: repository name must be lowercase
  #
  _PROJECT: $PROJECT_ID
  # GKE details
  #_CLOUDSDK_CONTAINER_CLUSTER: mycluster
  #_CLOUDSDK_COMPUTE_ZONE: europe-west1-b

timeout: 3660s

# push this image to GCR - doing it this way instead of docker push links the image artifact in GCP Console's Cloud Build UI
images:
- ${_REGISTRY}/${_PROJECT}/${_IMAGE_NAME}
# the above pushed all tags to GCR without specifying tags explicitly like this:
#- gcr.io/${_PROJECT}/${_IMAGE_NAME}:latest
#- gcr.io/${_PROJECT}/${_IMAGE_NAME}:${_IMAGE_VERSION}

steps:
# Debug build environment, find we run inside $PWD of /workspace where our local $PWD was unpacked
#- name: busybox
#  args:
#    - sh
#    - -c
#
#    - pwd; ls -l
# use Docker cloud builder to build image - not available in eu.gcr.io
- name: gcr.io/cloud-builders/docker
  # multiple tags (all tags get pushed to GCR implicitly via image declaration above)
  args:
    - build
    # extra variables available ifor builds invoked by triggers:
    # https://cloud.google.com/cloud-build/docs/configuring-builds/substitute-variable-values
    - --tag=${_REGISTRY}/${_PROJECT}/${_IMAGE_NAME}:latest
    - --tag=${_REGISTRY}/${_PROJECT}/${_IMAGE_NAME}:${_IMAGE_VERSION}
    # use all cached layers where possible (will pull, better for seldomly rebuilt images, kaniko cache is better for frequent as it's local)
    - --cache-from=${_REGISTRY}/${_PROJECT}/${_IMAGE_NAME}:${_IMAGE_VERSION}
    # Specifying a different Dockerfile path is tricky - requires /workspace prefix and cannot be quoted or have a space between args otherwise ends up with this error trying to lstat blank or quote as first dir component:
    #
    #   failed to solve with frontend dockerfile.v0: failed to read dockerfile: error from sender: failed to resolve : lstat  : no such file or directory
    #
    #- --file=/workspace/DIR1/DIR2/Dockerfile
    #  this works too:
    #- -f=/workspace/DIR1/DIR2/Dockerfile
    - .
  # or use kaniko builder to cache
  #name: '${_REGISTRY}/kaniko-project/executor:latest'
  #- --destination=${_REGISTRY}/${_PROJECT}/${_IMAGE_NAME}:${_IMAGE_VERSION}
  #- --cache=true
  #- --cache-ttl=6h
  timeout: 3600s

# check the newly created image with a test command
- name: '${_REGISTRY}/${_PROJECT}/${_IMAGE_NAME}:${_IMAGE_VERSION}'
  args:
    - test
  timeout: 60s

#- name: '${_REGISTRY}/cloud-builders/docker'
#  args: ['push', '${_REGISTRY}/${_PROJECT}/${_IMAGE_NAME}:${_IMAGE_VERSION}']

# CI/CD - deploy to GKE
#
#- name: '${_REGISTRY}/cloud-builders/kubectl'
#  args: ['set', 'image', 'deployment/my-deployment', 'my-container=${_REGISTRY}/${_PROJECT}/${_IMAGE_NAME}:${_IMAGE_VERSION}']
#  env:
#  - 'CLOUDSDK_COMPUTE_ZONE=${_CLOUDSDK_COMPUTE_ZONE}'
#  - 'CLOUDSDK_CONTAINER_CLUSTER=${_CLOUDSDK_CONTAINER_CLUSTER}'
#  timeout: 600s
