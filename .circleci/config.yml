#
#  Author: Hari Sekhon
#  Date: 2020-02-23 23:30:14 +0000 (Sun, 23 Feb 2020)
#  Original: H1 2016 (Circle CI 1.x)
#
#  vim:ts=2:sts=2:sw=2:et
#
#  https://github.com/harisekhon/templates
#
#  License: see accompanying Hari Sekhon LICENSE file
#
#  If you're using my code you're welcome to connect with me on LinkedIn and optionally send me feedback to help steer this or other code I publish
#
#  https://www.linkedin.com/in/harisekhon
#

# https://circleci.com/docs/2.0/configuration-reference

version: 2.1

# XXX: consider avoiding Orbs for reuse CLI commands that port between CI/CD systems
orbs:
  # XXX: Needed on Docker executor but not on machine VM executor which already had AWS CLI installed
  orbs:
    # gives install/setup/some CLI wrapper commands - https://circleci.com/developer/orbs/orb/circleci/aws-cli
    aws-cli: circleci/aws-cli@2.0.6  # this is the Orb version not the AWS CLI version
  #
  # or use more portable check_bash_syntax.sh in https://github.com/HariSekhon/DevOps-Bash-tools
  # https://circleci.com/developer/orbs/orb/circleci/shellcheck
  shellcheck: circleci/shellcheck@2.0.0
#  # The python orb contains a set of prepackaged CircleCI configuration you can use repeatedly in your configuration files
#  # https://circleci.com/developer/orbs/orb/circleci/python
#  python: circleci/python@1.2

# defines jobs run order and triggers
workflows:
  myworkflow:  # XXX: Edit section
    #triggers:  # without this runs on every push
    jobs:
      - shellcheck/check:
          #dir: ./my-scripts
          #exclude: SC2148
      # concurrent by default unless has 'requires' dependency
      - mybuild1
        requires:
          - shellcheck/check
        filters:
          branches:
            only:
              - main
              - master
              - dev
              - staging
              - production
      # mybuild2 + build3 will run concurrently
      - mybuild2:
          requires:
           - mybuild1  # start only after mybuild1 completees successfully
      - mybuild3:
          context: my_context_name  # inherits all the env vars set at the context level
          requires:
           - mybuild1  # start only after mybuild1 completees successfully
      - human_gate:
          type: approval
          requires:
            - mybuild1
      - mydeploy:
          requires:
            - human_gate
          filters:  # AND'd
            branches:  # requires entire branch to match
              only:  # only branches matching the below regex filters will run
                - dev
                - /pre-prod(?:-.+)?$/
              ignore: /pr-.*/
            tags:
              only: /^v.*/
  nightly:
    triggers:
      - schedule:
          cron: "0 0 * * *"  # step format (*/2) and range format (1-5) are not supported as of 2.1
          filters:
            branches:
              only:
                - main

jobs:
  mybuild:
    parameters:
      myparam:
        type: string
        default: myvalue
    environment:  # job-wide env vars
      AWS_ACCOUNT_ID: "123456789012"  # store digits over 6 chars as a string to prevent numeric exponential conversion

    # XXX: Edit to use either the docker or machine section depending on whether you need to build a docker image

    #macos: # VM with Xcode version 11.3
    # xcode: 11.3.0

    # Instance Class resource sizing is different between Machine VM and Docker (machine is just under double the RAM)
    #
    #   https://circleci.com/docs/2.0/executor-types/#using-machine
    #   https://circleci.com/docs/2.0/executor-types/#available-docker-resource-classes
    #
    resource_class: medium  # default: large. XXX: Edit to balance performance/cost or resources required for build/tests to execute successfully

    # XXX: OR
    machine: # VM - use to build docker images
      #
      #   https://circleci.com/docs/2.0/configuration-reference/#available-machine-images
      #
      # default image gives old Docker 17 which fails to build with error:
      #
      #   Step 1/12 : FROM --platform=linux/amd64 amazonlinux:latest
      #   Unknown flag: platform
      #
      #image: default  # old
      #image: ubuntu-2004:202010-01  # (recommended) Ubuntu 20.04 VM with Docker 19.03.13 and docker-compose 1.27.4
      image: ubuntu-2004:202111-01   # Ubuntu 20.04 VM, Docker v20.10.11, Docker Compose v1.29.2
      docker_layer_caching: true  # default: false - retains docker image layers cache for 3 days to speed up builds - available on performance and custom plans only
      #
      # set to an actual docker image when running locally using circle_ci_job.sh
      # docker image must have git installed to do the checkout
      # so using harisekhon/dev:ubuntu instead of base ubuntu image
      #image: harisekhon/dev:ubuntu

    # XXX: OR
    #
    # CircleCI Docker Images:
    #
    #   https://circleci.com/developer/images
    #
    #   https://hub.docker.com/u/cimg
    #
    docker:  # first container listed is where step commands run - usually you want a language image here
      #- image: buildpack-deps:trusty  # legacy, replaced by next-gen cimg/base
      - image: cimg/base:2021.04  # base ubuntu image, small but should already be cached on host so quick to start - see https://circleci.com/docs/2.0/circleci-images/#circleci-base-image
      #- image: cimg/python:3.8
      #- image: $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/myrepo:latest
        environment:
          AWS_DEFAULT_REGION: eu-west-2
        auth:
          username: harisekhon
          password: $DOCKERHUB_PASSWORD  # context / project UI env-var reference
        # to access private ECR images, either have the standard AWS environment variables available via context/project env vars or specific explicitly like so:
        aws_auth:
          # loaded from context or project env vars - see circleci_project_set_env_vars.sh for easy loading for an exported AWS credential CSV in the adjacent DevOps Bash tools repo:
          #
          #   https://github.com/HariSekhon/DevOps-Bash-tools
          #
          aws_access_key_id: $AWS_ACCESS_KEY_ID  # specify explicitly like this if different jobs use different env vars eg. $AWS_ACCESS_KEY_ID_STAGING vs $AWS_ACCESS_KEY_ID_PRODUCTION
          aws_secret_access_key: $AWS_SECRET_ACCESS_KEY
        environment:  # environment only for this docker container - base64 encode value if multiline
          MY_ENV_VAR_1: myvalue1
          MY_ENV_VAR_2: myvalue2
      - image: postgres:9.4.1
        auth:
          username: harisekhon
          password: $DOCKERHUB_PASSWORD  # context / project UI env-var reference
        #
        # for the secondary or service container run in a common
        # network where ports exposed on the primary container are
        # available on localhost.
        environment: # Specifies the POSTGRES_USER authentication
         # environment variable, see circleci.com/docs/2.0/env-vars/
         # for instructions about using environment variables.
          POSTGRES_USER: root

    # if running on Alpine, do this to source environment
    shell: /bin/sh -leo pipefail
      environment:
        - BASH_ENV: /etc/profile

    # speed up builds by using ram instead of disk if thre is enough ram
    #working_directory: /mnt/ramdisk  # Docker
    #working_directory: /dev/shm      # VM

    steps:
      - checkout
      # XXX: if primary executor is Docker
      - setup_remote_docker:
        version: 20.10.11  # https://circleci.com/docs/2.0/building-docker-images/#docker-version
        docker_layer_caching: true  # available on performance and custom plans only
      # set up a specific version of AWS CLI using the AWS Orb if necessary
      - aws-cli/install:
          version: 2.4.6  # AWS CLI versions: https://github.com/aws/aws-cli/blob/v2/CHANGELOG.rst
      - run:
        name: Setup Environment Variables    # BASH_ENV gets sourced automatically by subsequent bash shells across run steps
        command: |
          echo 'export PATH=$GOPATH/bin:$PATH' >> "$BASH_ENV"
          echo 'export GIT_SHA1=$CIRCLE_SHA1' >> "$BASH_ENV"
          echo 'export GIT_COMMIT=$CIRCLE_SHA1' >> "$BASH_ENV"  # port for Jenkins standard env var, used by various scripts
          source "$BASH_ENV"  # if you need these new env vars in the same run step as well as subsequent ones
      - run:
          name: local-step-environment
          command: echo "$MYVAR"
          environment:
            MYVAR: test
      - run: setup/ci_bootstrap.sh
      - run: make init
      - run: make
      # to allow docker networking to work
      - run: sudo sysctl net.ipv4.ip_forward=1
      - run: sudo service docker restart
      - run: make test
      - run: echo myparam = << parameters.myparam >>
      #
      # from circleci/python orb
      #
      #- python/install-packages:
      #  pkg-manager: pip
          # app-dir: ~/project/mydir  # path to requirements.txt
          # pip-dependency-file: dev-requirements.txt  # name of requirements.txt file
			#
			# Install a specific version of NodeJS
      ##
      #- run:
      #    name: "Update Node.js and npm"
      #    command: |
      #      curl -sSL "https://nodejs.org/dist/v11.10.0/node-v11.10.0-linux-x64.tar.xz" | sudo tar --strip-components=2 -xJ -C /usr/local/bin/ node-v11.10.0-linux-x64/bin/node
      #      curl https://www.npmjs.com/install.sh | sudo bash
      #
      # call custom command
      #
      #- mycommand:
      #    myarg: "test2"
      #
      #- save_cache:
      #    key: mykey-{{ .Environment.CIRCLE_SHA1 }}
      #    paths:
      #      - ~/go
      #      - ./node_modules
      #      - ~/.cache  # pip
      #      - ~/.cpan
      #      - ~/.cpanm
      #      - ~/.gem
      #      - ~/.m2
      #      - ~/.ivy
      #      - ~/.ivy2
      #      - ~/.gradle
      #      - ~/.sbt
      #      - pytools_checks
      #
      #- restore_cache:
      #    key: mykey-{{ .Environment.CIRCLE_SHA1 }}
      #    keys:
      #      - myapp-{{ checksum "package-lock.json" }}

      # save only for the duration of the workflow for downstream jobs
      #- persist_to_workspace:
      #    root: workspace  # absolute or relative to path from working dir
      #    paths:
      #      - echo-output  # relative to root
      #
      # restore from workflow workspace
      #- attach_workspace:
      #    at: /tmp/workspace  # absolute or relative path from working_dir

      #- store_artifacts: # See circleci.com/docs/2.0/artifacts/ for more details.
      #    path: /tmp/artifact-1
      #    destination: artifact-file

# command with parameters (can be reused across steps and jobs)
commands:
  mycommand:  # XXX: Edit section
    description: "My description"
    parameters:
      myarg:
        type: string
        default: "test"
    steps:
      - run: echo << parameters.myarg >>
