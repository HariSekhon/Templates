# !/usr/bin/env d2
#
#  Author: Hari Sekhon
#  Date: [% DATE #  2023-05-02 23:44:42 +0100 (Tue, 02 May 2023) %]
#
#  vim:ts=4:sts=4:sw=4:et:filetype=d2
#
#  [% URL %]
#
#  [% LICENSE %]
#
#  [% MESSAGE %]
#
#  [% LINKEDIN %]
#

# ============================================================================ #
#                    D2 Declarative Diagram Language Template
# ============================================================================ #

direction: right

# object: name
#
# id_key: display_name_label
#
# object1; object2

# Shapes:
#
#   https://d2lang.com/tour/shapes
#
#     rectangle
#     square
#     page
#     parallelogram
#     document
#     cylinder
#     queue
#     package
#     step
#     callout
#     stored_data
#     person
#     diamond
#     oval
#     circle
#     hexagon
#     cloud
#
# Special Shapes:
#
#     text
#     code
#     class
#     sql_table
#     image
#     sequence_diagram
#
#
# set shape to cloud instead of default rectangle
# id.shape: cloud
# id.style.fill: transparent

# Connections - arrows
#
#   https://d2lang.com/tour/connections
#
#     ->
#     <-
#     <->
#     --
#
#  must reference objects by id_key, not display_name_label

# one -> way
# or
# way <- one

# two <-> way

# equal1 -- equal2

# ===============
# Object nesting:

HA.style.double-border: true
# declare objects inside the HA object
HA.Master -> HA.Slave: replication {
  style.animated: true
}

# https://d2lang.com/tour/style
HA.Slave.style.opacity: 0.5

# could also declare them inline
# HA.Master2 -> HA.Slave2
# or avoid repeating the outer objects using maps
# HA: {
#  Master3 -> Slave3
# }

# Container labels
gcloud: Google Cloud {
  GKE.style.3d: true
}

aws: {
  # use 'label' reserved word instead of :label suffix
  label: Amazon Web Services
  EKS.style.3d: true
  # refer to something out of the current object using '_' to signify the root anchor point
  _.gcloud.GKE <- EKS: migrate
}

# ================

# label the connection

Replica 1 -- Replica 2: Kept in sync

# redundant links
Internet -> DataCenter 1
Internet -> DataCenter 1: backup link {
  # : label for arrow
  style.opacity: 0.5 # set the backup link to half the opacity
  style.stroke-dash: 5
}

# Stage One -> Stage Two -> Stage Three -> Stage Four
# Stage Four -> Stage One: repeat

# Arrowheads - change shape or label the arrowhead
#
#   https://d2lang.com/tour/connections#arrowheads
#
#     triangle (default)
#     arrow (like triangle but pointier)
#     diamond
#     Can be further styled as style.filled: true.
#     circle
#     Can be further styled as style.filled: true.
#     cf-one, cf-one-required (cf stands for crows foot)
#     cf-many, cf-many-required
#

a <-> b: arrow_label {
  source-arrowhead: arrow_head_label
  target-arrowhead: arrow_head_label2 {
    shape: diamond
  }
}

# Release Straight to Production!: {
#  Dev1 -> CI/CD: feature 1
#  Dev2 -> CI/CD: feature 2
#  Dev3 -> CI/CD: feature 3
#  CI/CD -> Prod
# }

# ======================================
# Text
#
#   https://d2lang.com/tour/text
#
# - quote or backslash escape dots for filenames
# - double || to get one in code blocks have have pipe symbols |
#

README: |md
  # Header
  - list item 1
  - list item 2
|
# XXX: must terminate the block string with another pipe "|" symbol

# the above is borderless - so enclose in parent object{}

"README.md": {
  style.multiple: true
  |md
    # Header2
    - list item 3
    - list item 4
  |
  tooltip: You should always have a README!! # hover to see this - works better in svg or --watch - for PNG exports adds numbers and an appendix
  link: https://github.com/HariSekhon/Templates # clickable!
}

test\.sh: {
  # must leave first line blank to prevent this error:
  #
  #     error on line 944 at column 3253: Attribute class redefined
  #
  someshellscriptid: |sh

    #!/usr/bin/env bash
    echo testing
  |
  # near: top-right  # https://d2lang.com/tour/positions
}

my_diagram\.py: {
  somecodeobjectid: |py
    import diagrams
  |
  # near: center-right
}

my\.go: {
  somecodeobjectid2: |go
    import "fmt"
  |
  # near: bottom-right
}

# ======================================
# Icons
#
#   https://d2lang.com/tour/icons
#
#   https://icons.terrastruct.com/
#
#
# - icon: https://icons.terrastruct.com/infra/019-network.svg
# - icon: ./images/f5.png
# - set shape: image - for standalone icon shapes

# ======================================
# SQL Tables for relationship diagrams
#
#   https://d2lang.com/tour/sql-tables

# ======================================
# UML class diagrams for code
#
#   https://d2lang.com/tour/uml-classes
#
# ======================================
# Sequence diagrams for flows
#
#   https://d2lang.com/tour/sequence-diagrams

# ======================================
# Classes
#
#   https://d2lang.com/tour/classes
#
# - define attributes and apply them to multiple objects

classes: {
  load balancer: {
    label: load\nbalancer
    width: 100
    height: 200
    style: {
      stroke-width: 0
      fill: "#44C7B1"
      shadow: true
      border-radius: 5
    }
  }
  unhealthy: {
    style: {
      fill: "#FE7070"
      stroke: "#F69E03"
    }
  }
}

web traffic -> web lb
web lb.class: load balancer

web lb -> api1
web lb -> api2
web lb -> api3

api2.class: unhealthy

api1 -> cache lb
api3 -> cache lb

cache lb.class: load balancer
